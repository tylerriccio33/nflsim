---
title: "nflsim"
execute:
  echo: false
---

## NFL Game Simulation Results

### How this works

As opposed to traditional game outcome models, this is a method of resampling of similar situations, per play. By leveraging this scheme, the model pulls from strong historical precedent to form more information rich predictions.

### Advantages

1.  Capture of Subtle Effects
    1.  Traditional spread models suffer from a slew of issues that is inherent in NFL games. Namely outcome variance and lack of samples.
    2.  NFL outcomes (scores) are highly variant and subject to change. This makes modeling highly subtle interaction effects nearly impossible as most models are just struggling to estimate the main effects. This is exhibited through 2 main mechanisms.
        1.  When regularizing tree based models, the subtle effects will be avoided in the model formula due to the inability to estimate their impact on an already complicated and variant outcome.
        2.  Linear models will have trouble modeling these subtle effects since they usually rely on deep non-linear interactions. Regularizing models like elastic net regression in practice, will completely remove any consideration of subtle effects.
2.  Realism
    1.  This resampling method introduces complete realism, since the plays literally happened. By relying on historical precedent, you can expect a degree of realism that a traditional machine learning model can't mimic.
    2.  This realism will beat a multi-modal or multi-output model like a neural network, since the output being modeled isn't predicted, it's re-sampled from the set.
3.  Leverage of Additional Information
    1.  As mentioned, traditional models are often overwhelmed by the magnitude of NFL features. However, they often fail to take advantage of this due to the outcome variance and lack of samples. This makes teasing out very deep interactions, only accessible from fringe features, difficult. By taking into account far more information w/o any performance penalty, this method can model these deep interaction effects.

### Notable Disadvantages

1.  Recency Bias
    1.  The resampling technique prioritizes recent events rather than skill, unlike other models. This has far more advantages than disadvantages. However, it will fail to capture larger team changes outside of the QB.
    2.  For example, if there was a running back hurt all last year and they make their debut week 1, the model won't factor this into the resampling. There is *some* information indicating new talent but nothing great enough (yet) to influence the decision making in a major way.
    3.  In the future, this problem will be slowly be alleviated.
2.  Significant Roster Changes
    1.  Like the last point, only *some* new information is available about significant roster changes. The model/resampling leverages existing recent information about how each team performed in some context. This context assumes at least some change in roster/personnel but it has no great way of tracking how great the change is.
    2.  In the future this problem will be fixed.
3.  Small Simulation Issues
    1.  There's no real half-time.
    2.  Home teams are not afforded the usual 1.5 point advantage on the spread but are given an average of one extra possession.
    3.  Kicker and punter samples tend to be *very* over sampled for recent events. This makes a hot hand at each position probably more influential than it needs to be.
    4.  Each team doesn't completely know about the clock, although it knows when it should pass and when it is losing.
    5.  All kickoffs are touch backs.

```{r}
source("src.R")
source("data.R")
```

## Team Level Recaps

```{r}


summary_stats_gt <- game_results_data %>% 
  mutate(points_tibble = map(replication_results, ~ {
    group_by(.x, id_posteam) %>%
      summarize(tds = sum(touchdown),
                fgs = sum(field_goal_made), 
                .groups = 'drop') %>%
      mutate(tds = tds * 7,
             fgs = fgs * 3) %>%
      rowwise() %>%
      mutate(points = sum(c_across(c(tds, fgs)))) %>%
      ungroup() %>%
      select(-c(tds, fgs))
  })) %>%
  mutate(home_points = map2_dbl(points_tibble, id_home_team, \(x, y) filter(x, id_posteam == y)$points),
         away_points = map2_dbl(points_tibble, id_away_team, \(x, y) filter(x, id_posteam == y)$points)) %>%
  group_by(id_home_team, id_away_team) %>%
  summarize(dense_score = {
      density_estimate <- density(home_score)
      mode_index <- which.max(density_estimate$y)
      density_estimate$x[mode_index]
    },
    raw_sd = sd(home_score),
    home_score = mean(home_score),
    home_points = mean(home_points),
    away_points = mean(away_points),
    score_dist = list(home_score), 
    .groups = 'drop') %>%
  mutate(confidence = 1 - scales::rescale(raw_sd),
         home_spread = home_score * -1) %>%
lookup_replace(logo_lookup, by = c('id_home_team' = 'id_posteam'), logo) %>%
  lookup_replace(logo_lookup, by = c('id_away_team' = 'id_posteam'), logo) %>%
  mutate(total = home_points + away_points) %>%
  relocate(
    id_home_team,
      id_away_team,
      home_score,
      home_points,
      away_points,
      confidence,
      home_spread,
      total
  ) 


summary_stats_gt %>%
  gt() %>%
  # data manipulation
  cols_label(
    id_home_team = "home",
    id_away_team = "away"
  )  %>%
  cols_label_with(fn = clean_colnames_vec) %>%
  # titles
  tab_header("Results of 150 Simulations per Game") %>%
  tab_spanner(label = "Teams", columns = c(id_home_team:id_away_team))  %>%
  tab_spanner(label = "Summary", columns = c(home_score:confidence)) %>%
  tab_spanner(label = "Odds", columns = c(home_spread,total)) %>%
  tab_spanner(label = "Advanced Stats", columns = c(dense_score:last_col())) %>%
  gt_add_divider(columns = id_away_team, include_labels = F, color = "black") %>%
  gt_add_divider(columns = confidence, include_labels = F, color = "black") %>%
  gt_add_divider(columns = total, include_labels = F, color = "black") %>%
  # fmt
  fmt_number(columns = c(where(is.numeric), -confidence), decimals = 1) %>%
  fmt_percent(confidence)  %>%
  gt_img_rows(c(id_home_team)) %>%
  gt_img_rows(id_away_team) %>%
  cols_align(align = 'center', columns = c(id_home_team, id_away_team)) %>%
  # coloring
  gt_hulk_col_numeric(home_score) %>%
  gt_hulk_col_numeric(confidence)  %>%
   tab_style(
    locations = cells_body(
      columns = id_home_team,
      rows = home_score > 0
    ),
    style = list(cell_fill(color = '#caf4a1'))
  ) %>%
     tab_style(
    locations = cells_body(
      columns = id_away_team,
      rows = home_score < 0
    ),
    style = list(cell_fill(color = '#caf4a1'))
  ) %>%
  # notes
  tab_footnote(md("Interpreted as a *home* win by this much."),
              locations = cells_column_labels(columns = home_score)) %>%
  tab_footnote(md("Function of relative variance in the results, also the *Raw SD*. Higher numbers indicate higher ranges of outcomes, or uncertainty."),
               locations = cells_column_labels(columns = confidence)) %>%
  tab_footnote("Adjusted results reflecting the most dense location in the score distribution. Numbers should closely reflect the average, if distributed normally.",
               locations = cells_column_labels(columns = dense_score)) %>%
  # theme
  dataveRse::gt_my_theme(theme_fn = gt_theme_538) %>%
  tab_options(footnotes.multiline = F) %>%
  tab_source_note(html('<pre><span style="background-color: #caf4a1;"
                       >        </span> = Winner</pre>')) %>%

  # plot
    gt_plt_dist(score_dist)

```

```{r}

pass_results <- results %>%
  extract_variable(id_game) %>%
  mutate(qb_results = map(replication_results, calculate_qb_stats)) %>%
  select(id_game, qb_results) %>%
  unnest(qb_results) %>%
  group_by(id_game, id_passer) %>%
  summarize(across(where(is.numeric), ~ mean(.x))) %>%
  ungroup() %>%
  # join to player
  left_join(player_name_lookup, by = c('id_passer'='id_gsis')) %>%
  # join to headshot
  left_join(player_headshot_lookup, by = c('id_passer' = 'id_gsis')) %>%
  select(-c(id_game, id_passer)) %>%
  # clean and arrange
  select(name, head, dropbacks, passing_yards, tds, sacks, interceptions, cpoe, epa) %>%
  arrange(-epa)

pass_results %>%
  # table
  gt() %>%
  # label
  gt_add_divider(head, include_labels = F, color = 'black') %>%
    gt_add_divider(interceptions, include_labels = F, color = 'black') %>%
  tab_header(title = "Average QB Performance Across Simulations", 
             subtitle = "Mean statistics extracted from all game replications, ranked by cpoe.") %>%
  tab_spanner(label = "Simple Metrics",
              c(dropbacks:interceptions)) %>%
  tab_spanner(label = "Advanced Metrics", columns = c(cpoe, epa)) %>%
  # format
  fmt_number(c(dropbacks, passing_yards, tds, sacks, interceptions),decimals = 1) %>%
  fmt_number(c(cpoe, epa), decimals = 2) %>%
  gt_img_rows(head) %>%
  gt::cols_label(head = "",
                 name = "QB") %>%
  # theming
  gt_hulk_col_numeric(c(tds, cpoe)) %>%
  gt_my_theme(size = 'medium', theme_fn = gt_theme_538)


```

### Deep Dives

```{r}

# set stat classes
stat_list <- list(
air_yards = Stat("air_yards",
                  "Air it out - wins included high average air yards."),
early_down_passing = Stat("early_down_passing",
                           "Throw it early - wins were associated with higher early down passing over expected."),
interceptions = Stat("interceptions",
                      "Minimize the interceptions - wins included a low int rate",
                      max = F),
pass_wpa = Stat("pass_wpa",
                 "Be an effective passer - wins were lead by highly effective passing games."),
qb_hits = Stat("qb_hits",
                "Protect the QB - wins were associated with low qb hit rates.",
                max = F),
rush_wpa = Stat("rush_wpa",
                 "Be run efficient - wins were driven by an consistently effective run game."),
tds = Stat("tds",
            "Hit paydirt - games were won by touchdowns, not field goals."),
top = Stat("top",
            "Control the game - time of possession was important to winning games."),
yac_wpa = Stat("yac_wpa",
                "Lean on YAC - win on the back of consistent yac.")
)

deep_game_stats <- results %>%
  extract_variable(id_game, id_home_team, id_away_team) %>%
  extract_variable(score_differential, slice_function = last) %>%
  mutate(home_win = score_differential > 0)  %>%
  mutate(game_summary = map(replication_results, \(x) summarize_game(x))) %>%
  select(game_summary, id_game, home_win, id_home_team, id_away_team)  %>%
  unnest(game_summary) %>%
  mutate(winning_team = if_else(home_win, id_home_team, id_away_team)) %>%
  group_by(id_game, winning_team, id_posteam) %>%
  summarize(across(where(is.numeric), \(x) mean(x, na.rm = T))) %>%
  ungroup() %>%
  filter(winning_team == id_posteam) %>%
  select(-winning_team) %>%
  pivot_longer(cols = -c(id_game, id_posteam), 
               names_to = "metric") %>%
  # rank before wider pivot
  group_by(metric) %>%
  arrange(-value, .by_group = T) %>%
  mutate(rank = row_number()) %>%
  group_by(id_game) %>%
  mutate(cls = map(metric, \(x) stat_list[[x]]))  %>%
  unnest_wider(cls) %>%
  ungroup() %>%
  group_by(metric) %>%
  mutate(rank = if_else(max, rank, rev(rank))) %>%
  ungroup() %>%
  filter(rank <= 5) %>%
  mutate(across(ends_with('rank'), ~ as.character(.x)),
         across(ends_with('rank'), ~ paste0(.x, "/32"))) %>%
  relocate(starts_with('id_'), starts_with('home_')) %>%
  lookup_replace(logo_lookup, by = c('id_posteam' = 'id_posteam'), logo) %>%
  group_by(id_game) %>%
  select(-c(name, max, max_fn)) %>%
  arrange(id_game) %>%
  arrange(id_posteam, .by_group = T) 


deep_game_stats %>%
  # table
  gt() %>%
  # formatting
  fmt_number(c(value), decimals = 1) %>%
  # rank merge
  gt_merge_stack(col1 = value, col2 = rank) %>%
  cols_hide(c(metric)) %>%
  cols_move_to_start(c(id_posteam)) %>%
  # image manipulation
  gt_img_rows(columns = c(id_posteam))  %>%
  # labeling
  cols_label(id_posteam = "",
             value = "Value/Rank",
             text = "") %>%
  # titles
  tab_header("Keys to the Game",
             subtitle = "Trends and formulas driving wins and losses. Some teams will not be represented, directly.") %>%
  tab_footnote("") %>%
  # theming
  dataveRse::gt_my_theme(theme_fn = gt_theme_538)



```

### WR Stats

```{r}

calculate_wr_stats <- function(result) {
  drop_na(result,id_receiver_player) %>%
    group_by(id_receiver_player) %>%
    summarize(yards_gained = sum(yards_gained, na.rm = T),
              passing_yards = sum(passing_yards, na.rm = T),
              yac = sum(yards_after_catch, na.rm = T),
              tds = sum(touchdown, na.rm = T)) %>%
    ungroup()
}


wr_results <- results %>%
  extract_variable(id_game) %>%
  mutate(wr_results = map(replication_results, calculate_wr_stats)) %>%
  select(id_game, wr_results) %>%
  unnest(wr_results) %>%
  group_by(id_game, id_receiver_player) %>%
  summarize(across(where(is.numeric), ~ mean(.x))) %>%
  ungroup() %>%
  filter(yards_gained > 25) %>%
  # join to player
  left_join(player_name_lookup, by = c('id_receiver_player'='id_gsis')) %>%
  # join to headshot
  left_join(player_headshot_lookup, by = c('id_receiver_player' = 'id_gsis')) %>%
  select(-c(id_game, id_receiver_player))  %>%
  #arrange
  arrange(-yards_gained)

wr_results%>%
  relocate(name, head) %>%
    gt() %>%
    # label
    tab_header("Receiving Statistics", subtitle = "Summary stats across any receiver player for all simulations.") %>%
    # ftm
    fmt_number(columns = where(is.numeric), decimals = 1) %>%
  gt_img_rows(head) %>%
    # color
    gt_hulk_col_numeric(c(yards_gained, tds)) %>%
    # theme
     gt::cols_label(head = "",
                 name = "Player") %>%
      opt_interactive(use_pagination = F, use_search = T) %>%
    gt_my_theme(size = 'big', theme_fn = gt_theme_espn)
  
  
  
```
